//// DotGraphEE Generator Configuration ////
// Version: 1.0.3-dev 

{
  // Data model configuration.
  // Each model requires a 'name', any number of 'fields' entries, any number of 'hasOne', 'hasMany', and 'maybeHasOne' entries.
  // Each 'fields' entry requires a 'name' and a 'type'.
  // Supported types are: int, bool, string, float, double, DateTime.
  // Each 'hasMany' entry must equal the 'name' of a model.
  // Each 'hasOne' and 'maybeHasOne' entry must equal the 'name' of a different model.
  "models": [
    {
      "name": "UserAccount",
      "features": [ "paging", "filtering", "sorting" ],
      "fields": [
        {
          "name": "AccountName",
          "type": "string"
        }
      ],
      "hasMany": [
        "Post"
      ],
      "hasOne": [
        "UserProfile"
      ],
      "maybeHasOne": [
        "Color"
      ]
    },
    {
      "name": "UserProfile",
      "features": [ "filtering" ],
      "fields": [
        {
          "name": "DisplayName",
          "type": "string"
        },
        {
          "name": "EmailAddress",
          "type": "string"
        },
        {
          "name": "IconUrl",
          "type": "string"
        }
      ]
    },
    {
      "name": "Color",
      "fields": [
        {
          "name": "Rgba",
          "type": "string"
        }
      ]
    },
    {
      "name": "Post",
      "features": [ "paging", "filtering", "sorting" ],
      "fields": [
        {
          "name": "Title",
          "type": "string"
        },
        {
          "name": "Content",
          "type": "string"
        },
        {
          "name": "CreatedUtc",
          "type": "DateTime"
        },
        {
          "name": "ViewCount",
          "type": "int"
        }
      ],
      "hasMany": [
        "Post"
      ]
    }
  ],

  "config": {
    "generateNamespace": "DotGraphEE_Demo",
    "headerComment": "// This file has been generated.",

    // "idType" options are "int", "string".
    // Determines which scalar type to use for identifiers.
    // "int" will use auto-incrementing integer values.
    // "string" will use GUID/UUID string values.
    "idType": "int",

    // "failedToFindStrategy" options are "useErrorCode", "useNullObject".
    // Determines how service responses when unable to find an entity by id.
    // useErrorCode: "Query { user(id: -1 )" Results in error message: "Unable to find 'User' by id '-1'"
    // useNullObject:"Query { user(id: -1 )" Results in null object: { "user": null }
    // The strategy affects queries, update mutations, and delete mutations.
    "failedToFindStrategy": "useErrorCode",

    // Prefix used for any self-referencing property of a model.
    "selfRefNavigationPropertyPrefix": "Parent",

    "sourcePackages": [
      "Microsoft.EntityFrameworkCore",
      "Microsoft.EntityFrameworkCore.Design",
      "HotChocolate.AspNetCore",
      "HotChocolate.AspNetCore.Subscriptions",
      "HotChocolate.AspNetCore.Playground",
      "HotChocolate.Subscriptions",
      "HotChocolate.Subscriptions.InMemory",
      "Npgsql.EntityFrameworkCore.PostgreSQL"
    ],
    "integrationTestPackages": [
      "Microsoft.EntityFrameworkCore",
      "Microsoft.EntityFrameworkCore.Design"
    ],

    // Output path configuration.
    "output": {
      "projectRoot": "../dotgraphee-demo",
      "sourceFolder": "src",
      "integrationTestFolder": "integrationTests",
      "generatedFolder": "generated",
      "dataTypeObjectsSubFolder": "dto",
      "databaseSubFolder": "db",
      "graphQlSubFolder": "gql"
    },

    // Database configuration, both for local development and docker-compose.
    "database": {
      "dbContextClassName": "DatabaseContext",
      "dbContextFileName": "DatabaseContext",
      "dbAccesserClassName": "DbService",
      "dbAccesserFileName": "DbService",
      "dbContainerName": "db",
      "localDev": {
        "dbHost": "localhost",
        "dbName": "dotgraphee",
        "dbUsername": "postgres",
        "dbPassword": "admin"
      },
      "docker": {
        "dbName": "dotgraphee",
        "dbUsername": "postgres",
        "dbPassword": "admin_password_please"
      }
    },

    // GraphQL names.
    "graphQl": {
      "gqlTypesFileName": "GraphQlTypes",
      "gqlQueriesClassName": "Queries",
      "gqlQueriesFileName": "Queries",
      "gqlMutationsClassName": "Mutations",
      "gqlMutationsFilename": "Mutations",
      "gqlMutationsInputTypePostfix": "Input",
      "gqlSubscriptionsClassName": "Subscriptions",
      "gqlSubscriptionsFilename": "Subscriptions",

      // Names for the create, update, and delete graphQL mutations.
      "gqlMutationsCreateMethod": "Create",
      "gqlMutationsUpdateMethod": "Update",
      "gqlMutationsDeleteMethod": "Delete",

      // Names for the subscriptions published by the create, update, and delete mutations.
      "gqlSubscriptionCreatedMethod": "Created",
      "gqlSubscriptionUpdatedMethod": "Updated",
      "gqlSubscriptionDeletedMethod": "Deleted"
    },

    // Integration test configuration.
    "integrationTests": {
      "testCategory": "GraphQlTests",
      "utilsFolder": "utils"
    }
  }
}
